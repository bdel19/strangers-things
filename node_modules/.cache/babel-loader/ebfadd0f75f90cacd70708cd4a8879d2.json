{"ast":null,"code":"const baseURL = 'https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT/';\nconst makeHeaders = token => {\n  const headers = {\n    \"Content-Type\": \"application/json\"\n  };\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n  return headers;\n};\nconst callAPI = async function (endpointPath) {\n  let defaultOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    token,\n    method,\n    body\n  } = defaultOptions;\n  const options = {\n    headers: makeHeaders(token)\n  };\n  if (method) {\n    options.method = method;\n  }\n  ;\n  if (body) {\n    options.body = JSON.stringify(body);\n  }\n  ;\n  try {\n    const response = await fetch(`${baseURL}${endpointPath}`, options);\n    const {\n      success,\n      error,\n      data\n    } = await response.json();\n    if (success) {\n      return {\n        error: null,\n        data: data\n      };\n    } else {\n      return {\n        error: error.message,\n        data: null\n      };\n    }\n  } catch {\n    error;\n  }\n  {\n    console.error(`Failed while calling ${endpointPath}:`, error);\n    return {\n      error: defaultOptions.defaultError,\n      data: null\n    };\n  }\n};\nexport const fetchPosts = async () => {\n  const {\n    error,\n    data\n  } = await callAPI('posts', {\n    defaultError: 'failed to load Posts'\n  });\n  return {\n    error,\n    posts: data ? data.posts : []\n  };\n};\nexport const registerUser = async (username, password) => {\n  const {\n    success,\n    error,\n    data\n  } = await callAPI('users/register', {\n    method: 'POST',\n    body: {\n      user: {\n        username,\n        password\n      }\n    },\n    defaultError: 'Registration Failed.'\n  });\n  return {\n    error: error,\n    token: success ? data.token : null\n  };\n};\nexport const fetchUser = async token => {\n  const {\n    success,\n    error,\n    data\n  } = await fetch('users/me', {\n    token: token,\n    defaultError: 'Failed to load User information'\n  });\n  return {\n    error: error,\n    guest: success ? data.user : null\n  };\n};\nexport const createPost = async (token, description, location) => {\n  try {\n    const post = {\n      description: description\n    };\n    if (location) {\n      post.location = location;\n    }\n    const {\n      success,\n      error,\n      data\n    } = await callAPI('posts', {\n      token: token,\n      method: 'POST',\n      body: {\n        post: post\n      }\n    });\n    if (success) {\n      return {\n        error: null,\n        post: data.post\n      };\n    } else {\n      return {\n        error: error.message,\n        post: null\n      };\n    }\n  } catch (error) {\n    console.error('POST /post failed:', error);\n    return {\n      error: 'Failed to create Post',\n      post: null\n    };\n  }\n};","map":{"version":3,"names":["baseURL","makeHeaders","token","headers","callAPI","endpointPath","defaultOptions","method","body","options","JSON","stringify","response","fetch","success","error","data","json","message","console","defaultError","fetchPosts","posts","registerUser","username","password","user","fetchUser","guest","createPost","description","location","post"],"sources":["/home/bdel19/course_work/strangers-things/src/api/api.js"],"sourcesContent":["const baseURL ='https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT/';\n\nconst makeHeaders = (token) => {\n    const headers = {\n        \"Content-Type\": \"application/json\",\n    };\n    \n    if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    return headers;\n};\n\nconst callAPI = async (endpointPath, defaultOptions={}) => {\n    const {token, method, body} = defaultOptions\n    \n    const options = {\n        headers: makeHeaders(token)\n    };\n\n    if (method) {\n        options.method = method;\n    };\n    if (body){\n        options.body = JSON.stringify(body);\n    };\n\n    try{\n        const response = await fetch(`${baseURL}${endpointPath}`, options);\n        const {success, error, data} = await response.json();\n\n        if (success) {\n            return {\n                error: null,\n                data: data\n            };\n        } else {\n            return {\n             error: error.message,\n                data: null\n            };\n        }\n    } catch {error} {\n        console.error(`Failed while calling ${endpointPath}:`, error);\n\n      return {\n          error: defaultOptions.defaultError,\n          data: null\n      };\n    }\n};\n\nexport const fetchPosts = async () => {\n    const {error, data} = await callAPI('posts', {\n        defaultError: 'failed to load Posts'\n    });\n\n    return {\n        error, \n        posts: data ? data.posts : []\n    };\n};\n\nexport const registerUser = async (username, password) => {\n    const {success, error, data} = await callAPI('users/register', {\n        method: 'POST',\n        body: {\n            user: {\n                username,\n                password\n            },\n        },\n        defaultError: 'Registration Failed.'\n    });\n\n    return {\n        error: error,\n        token: success ? data.token : null\n    };\n};\n        \nexport const fetchUser = async(token) => {\n    const {success, error, data} = await fetch ('users/me', {\n        token: token,\n        defaultError: 'Failed to load User information'\n    });\n    return {\n        error: error,\n        guest: success ? data.user : null\n    };\n};\n\nexport const createPost = async (token, description, location) => {\n    try {\n        const post = {\n            description: description\n        };\n        if (location) {\n            post.location = location;\n        }\n        const {success, error, data} = await callAPI('posts', {\n            token: token,\n            method: 'POST',\n            body: {\n                post: post\n            }\n        });\n\n        if ( success){\n            return {\n                error: null,\n                post: data.post\n            }\n        } else {\n            return {\n                error: error.message,\n                post: null\n            };\n        }\n\n    } catch(error){\n        console.error('POST /post failed:', error);\n\n        return {\n            error: 'Failed to create Post',\n            post: null\n        }\n    }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}