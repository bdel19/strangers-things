{"ast":null,"code":"const baseURL = 'https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT/';\nconst makeHeaders = token => {\n  console.log(\"running makeHeaders\");\n  const headers = {\n    \"Content-Type\": \"application/json\"\n  };\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n  return headers;\n};\n\n// const callAPI = async (endpointPath, defaultOptions={}) => {\n//     const options = {\n//         headers: makeHeaders(defaultOptions.token)\n//     };\n\n//     if (defaultOptions.method) {\n//         options.method = defaultOptions.method;\n//     };\n//     if (defaultOptions.body){\n//         options.body = JSON.stringify(defaultOptions.body);\n//     };\n\n//     try{\n//         const response = await fetch(`${baseURL}${endpointPath}`, options);\n//         const {success, error, data} = await response.json();\n\n//         if (success) {\n//             return {\n//                 success: success,\n//                 error: null,\n//                 data: data\n//             };\n//         } else {\n//             return {\n//                 success: success,\n//                 error: error.message,\n//                 data: null\n//             };\n//         }\n//     } catch {error} {\n//         console.error(`Failed while calling ${endpointPath}:`, error);\n\n//       return {\n//         success: false,\n//         error: defaultOptions.defaultError,\n//         data: null\n//       };\n//     }\n// };\n\nconst callAPI = async function (endpointPath) {\n  let defaultOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  console.log(\"running callAPI\");\n  const {\n    token,\n    method,\n    body\n  } = defaultOptions;\n  const options = {\n    headers: makeHeaders(token)\n  };\n  if (method) {\n    options.method = method;\n  }\n  if (body) {\n    options.body = JSON.stringify(body);\n  }\n  const response = await fetch(`${baseURL}${endpointPath}`, options);\n  const result = await response.json();\n  return result;\n};\n\n// export const fetchPosts = async () => {\n//     const {success, error, data} = await callAPI('posts', {\n//         defaultError: 'failed to load Posts'\n//     });\n\n//     return {\n//         error: error,\n//         posts: success ? data.posts : []\n//     };\n// };\n\nexport const fetchPosts = async token => {\n  try {\n    console.log(\"running fetchPosts\");\n    const {\n      success,\n      error,\n      data\n    } = await callAPI(\"posts\", {\n      token: token\n    });\n    if (success) {\n      return {\n        error: null,\n        posts: data.posts\n      };\n    } else {\n      return {\n        error: error.message,\n        posts: []\n      };\n    }\n  } catch (error) {\n    console.error(\"Error in fetchPosts!!!\", error);\n    return {\n      error: \"Failed to load Posts\",\n      posts: []\n    };\n  }\n};\n\n// export const registerUser = async (username, password) => {\n//     const {success, error, data} = await callAPI('users/register', {\n//         method: 'POST',\n//         body: {\n//             user: {\n//                 username,\n//                 password\n//             },\n//         },\n//         defaultError: 'Registration Failed.'\n//     });\n\n//     return {\n//         error: error,\n//         token: success ? data.token : null\n//     };\n// };\n\nexport const registerUser = async (username, password) => {\n  try {\n    console.log(\"running registerUser\");\n    const {\n      success,\n      error,\n      data\n    } = await callAPI(\"users/register\", {\n      method: \"POST\",\n      body: {\n        user: {\n          username,\n          password\n        }\n      }\n    });\n    if (success) {\n      return {\n        error: null,\n        token: data.token,\n        message: data.message\n      };\n    } else {\n      return {\n        error: error.message,\n        token: null,\n        message: null\n      };\n    }\n  } catch (error) {\n    console.error(\"Error in registerUser!!!\", error);\n    return {\n      error: \"Registration Failed.\",\n      token: null,\n      message: null\n    };\n  }\n};\n\n// export const fetchUser = async(token) => {\n//     const {success, error, data} = await fetch('users/me', {\n//         token: token,\n//         defaultError: 'Failed to load User information'\n//     });\n//     return {\n//         error: error,\n//         user: success ? data.user : null\n//     };\n// };\n\nexport const fetchUser = async token => {\n  try {\n    console.log(\"running fetchUser\");\n    const {\n      success,\n      error,\n      data\n    } = await callAPI(\"users/me\", {\n      token: token\n    });\n    if (success) {\n      return {\n        error: null,\n        user: data.username\n      };\n    }\n  } catch (error) {\n    console.error(\"Error in fetchUser!!\", error);\n    return {\n      error: \"Failed to load User information\",\n      user: null\n    };\n  }\n};\n\n// export const createPost = async (\n//     token, \n//     title, \n//     description, \n//     price, \n//     location \n//     ) => {\n//     const post = {\n//         title: title,\n//         description: description,\n//         price: price\n//     };\n//     if (location) {\n//         post.location = location;\n//     }\n\n//     const {success, error, data} = await callAPI('posts', {\n//         token: token,\n//         method: 'POST',\n//         body: {\n//             post: post\n//         },\n//         defaultError: \"Failed to create Post\"\n//     });\n//     return {\n//         error: error,\n//         post: success ? data.post: null\n//     };\n// }\n\nexport const createPost = async (token, title, description, price, location) => {\n  try {\n    console.log(\"running createPost\");\n    const post = {\n      title: title,\n      description: description,\n      price: price\n    };\n    if (location) {\n      post.location = location;\n    }\n    const {\n      success,\n      error,\n      data\n    } = await callAPI(\"posts\", {\n      token: token,\n      method: \"POST\",\n      body: {\n        post: post\n      }\n    });\n    if (success) {\n      return {\n        error: null,\n        post: data.post\n      };\n    }\n  } catch (error) {\n    console.error(\"Error in createPost!!\", error);\n    return {\n      error: \"Failed to create post\",\n      post: null\n    };\n  }\n};\nexport const loginUser = async (username, password) => {\n  try {\n    console.log(\"running loginUser\");\n    const {\n      success,\n      error,\n      data\n    } = await callAPI(\"users/login\", {\n      method: \"POST\",\n      body: {\n        user: {\n          username,\n          password\n        }\n      }\n    });\n    if (success) {\n      return {\n        error: null,\n        token: data.token,\n        message: data.message\n      };\n    } else {\n      return {\n        error: error.message,\n        token: null,\n        message: null\n      };\n    }\n  } catch (error) {\n    console.error(\"Error in loginUser!!!\", error);\n    return {\n      error: \"Login Failed.\",\n      token: null,\n      message: null\n    };\n  }\n};\nexport const deletePost = async (token, postId) => {\n  try {\n    console.log(\"running deletePost\");\n    const {\n      success,\n      error,\n      data\n    } = await callAPI(`posts/${postId}`, {\n      method: \"DELETE\",\n      token: token\n    });\n  } catch {}\n};","map":{"version":3,"names":["baseURL","makeHeaders","token","console","log","headers","callAPI","endpointPath","defaultOptions","method","body","options","JSON","stringify","response","fetch","result","json","fetchPosts","success","error","data","posts","message","registerUser","username","password","user","fetchUser","createPost","title","description","price","location","post","loginUser","deletePost","postId"],"sources":["/home/bdel19/course_work/strangers-things/src/api/api.js"],"sourcesContent":["const baseURL ='https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT/';\n\nconst makeHeaders = (token) => {\n    console.log(\"running makeHeaders\")\n    const headers = {\n        \"Content-Type\": \"application/json\",\n    };\n    \n    if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    return headers;\n};\n\n// const callAPI = async (endpointPath, defaultOptions={}) => {\n//     const options = {\n//         headers: makeHeaders(defaultOptions.token)\n//     };\n\n//     if (defaultOptions.method) {\n//         options.method = defaultOptions.method;\n//     };\n//     if (defaultOptions.body){\n//         options.body = JSON.stringify(defaultOptions.body);\n//     };\n\n//     try{\n//         const response = await fetch(`${baseURL}${endpointPath}`, options);\n//         const {success, error, data} = await response.json();\n\n//         if (success) {\n//             return {\n//                 success: success,\n//                 error: null,\n//                 data: data\n//             };\n//         } else {\n//             return {\n//                 success: success,\n//                 error: error.message,\n//                 data: null\n//             };\n//         }\n//     } catch {error} {\n//         console.error(`Failed while calling ${endpointPath}:`, error);\n\n//       return {\n//         success: false,\n//         error: defaultOptions.defaultError,\n//         data: null\n//       };\n//     }\n// };\n\n\nconst callAPI = async (endpointPath, defaultOptions={}) => {\n    console.log(\"running callAPI\")\n    const { token, method, body } = defaultOptions;\n\n    const options = {\n        headers: makeHeaders(token)\n    };\n\n    if (method) {\n        options.method=method;\n    }\n\n    if (body) {\n        options.body=JSON.stringify(body);\n    }\n\n    const response=await fetch(`${baseURL}${endpointPath}`, options);\n    const result=await response.json();\n\n    return result;\n};\n\n\n// export const fetchPosts = async () => {\n//     const {success, error, data} = await callAPI('posts', {\n//         defaultError: 'failed to load Posts'\n//     });\n\n//     return {\n//         error: error,\n//         posts: success ? data.posts : []\n//     };\n// };\n\nexport const fetchPosts = async(token) => {\n    try{\n        console.log(\"running fetchPosts\")\n        const {success, error, data} = await callAPI(\"posts\", {\n            token:token,\n        });\n\n        if (success) {\n            return {\n                error: null,\n                posts: data.posts\n            };\n        } else {\n            return {\n                error: error.message,\n                posts: []\n            };\n        }\n    } catch (error) {\n        console.error(\"Error in fetchPosts!!!\", error);\n        return {\n            error: \"Failed to load Posts\",\n            posts: []\n        };\n    }\n};\n\n// export const registerUser = async (username, password) => {\n//     const {success, error, data} = await callAPI('users/register', {\n//         method: 'POST',\n//         body: {\n//             user: {\n//                 username,\n//                 password\n//             },\n//         },\n//         defaultError: 'Registration Failed.'\n//     });\n\n//     return {\n//         error: error,\n//         token: success ? data.token : null\n//     };\n// };\n     \nexport const registerUser = async(username, password) => {\n    try {\n        console.log(\"running registerUser\")\n        const {success, error, data} = await callAPI(\"users/register\", {\n            method: \"POST\", \n            body: {\n                user: {\n                    username, \n                    password\n                },\n            },\n        });\n\n        if (success) {\n            return {\n                error: null, \n                token: data.token,\n                message: data.message\n            };\n        } else {\n            return {\n                error: error.message,\n                token: null,\n                message: null\n            };\n        }\n    } catch(error) {\n        console.error(\"Error in registerUser!!!\", error);\n\n        return {\n            error: \"Registration Failed.\",\n            token: null,\n            message: null\n        };\n    }\n};\n\n\n// export const fetchUser = async(token) => {\n//     const {success, error, data} = await fetch('users/me', {\n//         token: token,\n//         defaultError: 'Failed to load User information'\n//     });\n//     return {\n//         error: error,\n//         user: success ? data.user : null\n//     };\n// };\n\nexport const fetchUser = async(token) => {\n    try {\n        console.log(\"running fetchUser\")\n        const {success, error, data} = await callAPI(\"users/me\", {\n            token: token\n        });\n        if (success) {\n            return {\n                error: null,\n                user: data.username\n            };\n        }\n    } catch(error) {\n        console.error(\"Error in fetchUser!!\", error);\n\n        return {\n            error: \"Failed to load User information\",\n            user: null\n        };\n    }\n};\n\n// export const createPost = async (\n//     token, \n//     title, \n//     description, \n//     price, \n//     location \n//     ) => {\n//     const post = {\n//         title: title,\n//         description: description,\n//         price: price\n//     };\n//     if (location) {\n//         post.location = location;\n//     }\n\n//     const {success, error, data} = await callAPI('posts', {\n//         token: token,\n//         method: 'POST',\n//         body: {\n//             post: post\n//         },\n//         defaultError: \"Failed to create Post\"\n//     });\n//     return {\n//         error: error,\n//         post: success ? data.post: null\n//     };\n// }\n\nexport const createPost = async(\n    token, \n    title,  \n    description,\n    price,\n    location) => {\n    try {\n        console.log(\"running createPost\")\n        const post = {\n            title: title,\n            description: description,\n            price: price\n        };\n        if (location) {\n            post.location = location;\n        }\n        const { success, error, data} = await callAPI(\"posts\", {\n            token: token,\n            method: \"POST\", \n            body: {\n                post: post\n            },\n        });\n\n        if (success) {\n            return {\n                error: null,\n                post: data.post\n            };\n        }\n    } catch (error) {\n        console.error(\"Error in createPost!!\", error);\n\n        return { \n            error: \"Failed to create post\",\n            post: null\n        };\n    }\n}; \n\nexport const loginUser = async(username, password) => {\n    try {\n        console.log(\"running loginUser\")\n        const {success, error, data} = await callAPI(\"users/login\", {\n            method: \"POST\", \n            body: {\n                user: {\n                    username, \n                    password\n                },\n            },\n        });\n\n        if (success) {\n            return {\n                error: null, \n                token: data.token,\n                message: data.message\n            };\n        } else {\n            return {\n                error: error.message,\n                token: null,\n                message: null\n            };\n        }\n    } catch(error) {\n        console.error(\"Error in loginUser!!!\", error);\n\n        return {\n            error: \"Login Failed.\",\n            token: null,\n            message: null\n        };\n    }\n};\n\nexport const deletePost = async(token, postId) => {\n    try {\n        console.log(\"running deletePost\")\n\n        const{success, error, data} = await callAPI(`posts/${postId}`, {\n            method: \"DELETE\",\n            token: token,\n        });\n\n        \n    }catch{\n\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}