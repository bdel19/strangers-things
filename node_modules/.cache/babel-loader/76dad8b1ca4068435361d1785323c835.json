{"ast":null,"code":"const baseURL = 'https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT/';\n\n// export const fetchPosts = async () => {\n//     try{\n//         const response = await fetch(`${baseURL}posts`)\n//         console.log(\"response\", response);\n//         const {data} = await response.json();\n//         console.log(\"This is data\", data.posts);\n//         return data.posts;\n//     } catch(error) {\n//         console.error(\"fetchPostsError\", error);\n//     }\n// };\n\n// export const registerUser = async (username, password) => {\n//     try{\n//     const response =await fetch(`${baseURL}users/register`,{\n//         method: \"POST\", \n//         headers: {\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify({\n//             user: {\n//                 username,\n//                 password,\n//             },\n//         }),\n//     });\n//     console.log(\"response\", response);\n//     const data = await response.json();\n//     console.log(\"data\", data);\n//     return data;\n//     } catch(error) {\n//         console.error(\"There was an error registering the user\", error);\n//     }\n// };\n\n// export const fetchUser = async(token) => {\n//     try{\n//         const response = await fetch(`${baseURL}users/me`, {  \n//             headers: {\n//             'Content-Type': 'application/json',\n//             'Authorization': `Bearer ${token}`,\n//           }})\n//           console.log(\"USER RESPONSE\", response);\n//           const {data} = await response.json();\n//           console.log(\"USER DATA\", data );\n//           return data;\n//     }catch{\n//         console.log('fetchUserError');\n//     }\n// };\n\n// export const createPost = async () => {\n// };\n\nconst makeHeaders = token => {\n  const headers = {\n    \"Content-Type\": \"application/json\"\n  };\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n  return headers;\n};\nconst callAPI = async function (endpointPath) {\n  let defaultOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const options = {\n    headers: makeHeaders(defaultOptions.token)\n  };\n  if (defaultOptions.method) {\n    options.method = defaultOptions.method;\n  }\n  ;\n  if (defaultOptions.body) {\n    options.body = JSON.stringify(defaultOptions.body);\n  }\n  ;\n  const response = await fetch(`${baseURL}${endpointPath}`, options);\n  const result = await response.json();\n  return result;\n};\nexport const fetchPosts = async () => {\n  try {\n    const {\n      success,\n      error,\n      data\n    } = await callAPI('posts');\n    if (success) {\n      return {\n        error: null,\n        posts: data.posts\n      };\n    } else {\n      return {\n        error: error.message,\n        posts: []\n      };\n    }\n  } catch (error) {\n    console.error(\"fetchPostsError\", error);\n    return {\n      error: \"Failed to load Posts\",\n      posts: []\n    };\n  }\n};\nexport const registerUser = async (username, password) => {\n  try {\n    const {\n      success,\n      error,\n      data\n    } = await callAPI('users/register', {\n      method: 'POST',\n      body: {\n        guest: {\n          username,\n          password\n        }\n      }\n    });\n    if (success) {\n      return {\n        error: null,\n        token: data.token,\n        message: data.message\n      };\n    } else {\n      return {\n        error: error.message,\n        token: null,\n        message: null\n      };\n    }\n    ;\n  } catch (error) {\n    console.error(\"There was an error registering the user\", error);\n    return {\n      error: 'Registration Failed.',\n      token: null,\n      message: null\n    };\n  }\n  ;\n};\nexport const fetchUser = async token => {\n  try {\n    const response = await fetch(`${baseURL}users/me`, {\n      headers: makeHeaders(token)\n    });\n    console.log(\"USER RESPONSE\", response);\n    const {\n      data\n    } = await response.json();\n    console.log(\"USER DATA\", data);\n    return data;\n  } catch {\n    console.log('fetchUserError');\n  }\n};\nexport const createPost = async () => {};","map":{"version":3,"names":["baseURL","makeHeaders","token","headers","callAPI","endpointPath","defaultOptions","options","method","body","JSON","stringify","response","fetch","result","json","fetchPosts","success","error","data","posts","message","console","registerUser","username","password","guest","fetchUser","log","createPost"],"sources":["/home/bdel19/course_work/strangers-things/src/api/api.js"],"sourcesContent":["\n\n\nconst baseURL ='https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT/';\n\n\n\n// export const fetchPosts = async () => {\n//     try{\n//         const response = await fetch(`${baseURL}posts`)\n//         console.log(\"response\", response);\n//         const {data} = await response.json();\n//         console.log(\"This is data\", data.posts);\n//         return data.posts;\n//     } catch(error) {\n//         console.error(\"fetchPostsError\", error);\n//     }\n// };\n\n// export const registerUser = async (username, password) => {\n//     try{\n//     const response =await fetch(`${baseURL}users/register`,{\n//         method: \"POST\", \n//         headers: {\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify({\n//             user: {\n//                 username,\n//                 password,\n//             },\n//         }),\n//     });\n//     console.log(\"response\", response);\n//     const data = await response.json();\n//     console.log(\"data\", data);\n//     return data;\n//     } catch(error) {\n//         console.error(\"There was an error registering the user\", error);\n//     }\n// };\n        \n// export const fetchUser = async(token) => {\n//     try{\n//         const response = await fetch(`${baseURL}users/me`, {  \n//             headers: {\n//             'Content-Type': 'application/json',\n//             'Authorization': `Bearer ${token}`,\n//           }})\n//           console.log(\"USER RESPONSE\", response);\n//           const {data} = await response.json();\n//           console.log(\"USER DATA\", data );\n//           return data;\n//     }catch{\n//         console.log('fetchUserError');\n//     }\n// };\n\n\n// export const createPost = async () => {\n// };\n\nconst makeHeaders = (token) => {\n    const headers = {\n        \"Content-Type\": \"application/json\",\n    };\n    \n    if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    return headers;\n};\n\nconst callAPI = async (endpointPath, defaultOptions={}) => {\n    const options = {\n        headers: makeHeaders(defaultOptions.token)\n    };\n\n    if (defaultOptions.method) {\n        options.method = defaultOptions.method;\n    };\n    if (defaultOptions.body){\n        options.body = JSON.stringify(defaultOptions.body);\n    };\n\n    const response = await fetch(`${baseURL}${endpointPath}`, options);\n    const result = await response.json();\n\n    return result;\n};\n\nexport const fetchPosts = async () => {\n    try{\n        const {success, error, data} = await callAPI('posts');\n\n        if (success){\n            return {\n                error: null, \n                posts: data.posts\n            };\n        }else {\n            return {\n                error: error.message,\n                posts: []\n            };\n        }\n\n    } catch(error) {\n        console.error(\"fetchPostsError\", error);\n\n        return { \n            error: \"Failed to load Posts\",\n            posts: []\n        };\n    }\n};\n\nexport const registerUser = async (username, password) => {\n    try{\n        const {success, error, data} = await callAPI('users/register', {\n            method: 'POST',\n            body: {\n                guest: {\n                    username,\n                    password\n                },\n            }\n        });\n      if (success) {\n        return{\n            error: null,\n            token: data.token,\n            message: data.message\n        };\n      } else {\n        return {\n            error: error.message,\n            token: null,\n            message: null\n        };\n      };\n\n    } catch(error) {\n        console.error(\"There was an error registering the user\", error);\n\n        return {\n            error: 'Registration Failed.',\n            token: null,\n            message: null\n        };\n    };\n};\n        \nexport const fetchUser = async(token) => {\n    try{\n        const response = await fetch(`${baseURL}users/me`, {  \n            headers: makeHeaders(token),\n        })\n          console.log(\"USER RESPONSE\", response);\n          const {data} = await response.json();\n          console.log(\"USER DATA\", data );\n          return data;\n    }catch{\n        console.log('fetchUserError');\n    }\n};\n\n\nexport const createPost = async () => {\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}