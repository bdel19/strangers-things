{"ast":null,"code":"const baseURL = 'https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT/';\nconst makeHeaders = token => {\n  const headers = {\n    \"Content-Type\": \"application/json\"\n  };\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n  return headers;\n};\nconst callAPI = async function (endpointPath) {\n  let defaultOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const options = {\n    headers: makeHeaders(defaultOptions.token)\n  };\n  if (defaultOptions.method) {\n    options.method = defaultOptions.method;\n  }\n  ;\n  if (defaultOptions.body) {\n    options.body = JSON.stringify(defaultOptions.body);\n  }\n  ;\n  try {\n    const response = await fetch(`${baseURL}${endpointPath}`, options);\n    const {\n      success,\n      error,\n      data\n    } = await response.json();\n    if (success) {\n      return {\n        success: success,\n        error: null,\n        data: data\n      };\n    } else {\n      return {\n        success: success,\n        error: error.message,\n        data: null\n      };\n    }\n  } catch {\n    error;\n  }\n  {\n    console.error(`Failed while calling ${endpointPath}:`, error);\n    return {\n      success: false,\n      error: defaultOptions.defaultError,\n      data: null\n    };\n  }\n};\n\n// const callAPI = async (endpointPath, defaultOptions={}) => {\n//     const { token, method, body } = defaultOptions;\n\n//     const options = {\n//         headers: makeHeaders(token)\n//     };\n\n//     if (method) {\n//         options.method=method;\n//     }\n\n//     if (body) {\n//         options.body=JSON.stringify(body);\n//     }\n\n//     const response=await fetch(`${baseURL}${endpointPath}`, options);\n//     const result=await response.json();\n\n//     return result;\n// };\n\nexport const fetchPosts = async () => {\n  const {\n    success,\n    error,\n    data\n  } = await callAPI('posts', {\n    defaultError: 'failed to load Posts'\n  });\n  return {\n    error: error,\n    posts: success ? data.posts : []\n  };\n};\n\n// export const fetchPosts = async(token) => {\n//     try{\n//         const {success, error, data} = await callAPI(\"posts\", {\n//             token:token,\n//         });\n\n//         if (success) {\n//             return {\n//                 error: null,\n//                 posts: data.posts\n//             };\n//         } else {\n//             return {\n//                 error: error.message,\n//                 posts: []\n//             };\n//         }\n//     } catch (error) {\n//         console.error(\"Error in fetchPosts!!!\", error);\n//         return {\n//             error: \"Failed to load Posts\",\n//             posts: []\n//         };\n//     }\n// };\n\nexport const registerUser = async (username, password) => {\n  const {\n    success,\n    error,\n    data\n  } = await callAPI('users/register', {\n    method: 'POST',\n    body: {\n      user: {\n        username,\n        password\n      }\n    },\n    defaultError: 'Registration Failed.'\n  });\n  return {\n    error: error,\n    token: success ? data.token : null\n  };\n};\n\n// export const registerUser = async(username, password) => {\n//     try {\n//         const {success, error, data} = await callAPI(\"users/register\", {\n//             method: \"POST\", \n//             body: {\n//                 guest: {\n//                     username, \n//                     password\n//                 },\n//             },\n//         });\n\n//         if (success) {\n//             return {\n//                 error: null, \n//                 token: data.token,\n//                 message: data.message\n//             };\n//         } else {\n//             return {\n//                 error: error.message,\n//                 token: null,\n//                 message: null\n//             };\n//         }\n//     } catch(error) {\n//         console.error(\"Error in registerUser!!!\", error);\n\n//         return {\n//             error: \"Registration Failed.\",\n//             token: null,\n//             message: null\n//         };\n//     }\n// };\n\nexport const fetchUser = async token => {\n  const {\n    success,\n    error,\n    data\n  } = await fetch('users/me', {\n    token: token,\n    defaultError: 'Failed to load User information'\n  });\n  return {\n    error: error,\n    user: success ? data.user : null\n  };\n};\n\n// export const fetchUser = async(token) => {\n//     try {\n//         const {success, error, data} = await callAPI(\"users/me\", {\n//             token: token\n//         });\n//         if (success) {\n//             return {\n//                 error: null,\n//                 user: data.user\n//             };\n//         }\n//     } catch(error) {\n//         console.error(\"Error in fetchUser!!!\", error);\n\n//         return {\n//             error: \"Failed to load User information\",\n//             user: null\n//         };\n//     }\n// };\n\nexport const createPost = async (token, title, description, price, location) => {\n  const post = {\n    title: title,\n    description: description,\n    price: price\n  };\n  if (location) {\n    post.location = location;\n  }\n  const {\n    success,\n    error,\n    data\n  } = await callAPI('posts', {\n    token: token,\n    method: 'POST',\n    body: {\n      post: post\n    },\n    defaultError: \"Failed to create Post\"\n  });\n  return {\n    error: error,\n    post: success ? data.post : null\n  };\n};\n\n// export const createPost = async(token, title,  description)","map":{"version":3,"names":["baseURL","makeHeaders","token","headers","callAPI","endpointPath","defaultOptions","options","method","body","JSON","stringify","response","fetch","success","error","data","json","message","console","defaultError","fetchPosts","posts","registerUser","username","password","user","fetchUser","createPost","title","description","price","location","post"],"sources":["/home/bdel19/course_work/strangers-things/src/api/api.js"],"sourcesContent":["const baseURL ='https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT/';\n\nconst makeHeaders = (token) => {\n    const headers = {\n        \"Content-Type\": \"application/json\",\n    };\n    \n    if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    return headers;\n};\n\nconst callAPI = async (endpointPath, defaultOptions={}) => {\n    const options = {\n        headers: makeHeaders(defaultOptions.token)\n    };\n\n    if (defaultOptions.method) {\n        options.method = defaultOptions.method;\n    };\n    if (defaultOptions.body){\n        options.body = JSON.stringify(defaultOptions.body);\n    };\n\n    try{\n        const response = await fetch(`${baseURL}${endpointPath}`, options);\n        const {success, error, data} = await response.json();\n\n        if (success) {\n            return {\n                success: success,\n                error: null,\n                data: data\n            };\n        } else {\n            return {\n                success: success,\n                error: error.message,\n                data: null\n            };\n        }\n    } catch {error} {\n        console.error(`Failed while calling ${endpointPath}:`, error);\n\n      return {\n        success: false,\n        error: defaultOptions.defaultError,\n        data: null\n      };\n    }\n};\n\n\n// const callAPI = async (endpointPath, defaultOptions={}) => {\n//     const { token, method, body } = defaultOptions;\n\n//     const options = {\n//         headers: makeHeaders(token)\n//     };\n\n//     if (method) {\n//         options.method=method;\n//     }\n\n//     if (body) {\n//         options.body=JSON.stringify(body);\n//     }\n\n//     const response=await fetch(`${baseURL}${endpointPath}`, options);\n//     const result=await response.json();\n\n//     return result;\n// };\n\n\nexport const fetchPosts = async () => {\n    const {success, error, data} = await callAPI('posts', {\n        defaultError: 'failed to load Posts'\n    });\n\n    return {\n        error: error,\n        posts: success ? data.posts : []\n    };\n};\n\n// export const fetchPosts = async(token) => {\n//     try{\n//         const {success, error, data} = await callAPI(\"posts\", {\n//             token:token,\n//         });\n\n//         if (success) {\n//             return {\n//                 error: null,\n//                 posts: data.posts\n//             };\n//         } else {\n//             return {\n//                 error: error.message,\n//                 posts: []\n//             };\n//         }\n//     } catch (error) {\n//         console.error(\"Error in fetchPosts!!!\", error);\n//         return {\n//             error: \"Failed to load Posts\",\n//             posts: []\n//         };\n//     }\n// };\n\nexport const registerUser = async (username, password) => {\n    const {success, error, data} = await callAPI('users/register', {\n        method: 'POST',\n        body: {\n            user: {\n                username,\n                password\n            },\n        },\n        defaultError: 'Registration Failed.'\n    });\n\n    return {\n        error: error,\n        token: success ? data.token : null\n    };\n};\n     \n// export const registerUser = async(username, password) => {\n//     try {\n//         const {success, error, data} = await callAPI(\"users/register\", {\n//             method: \"POST\", \n//             body: {\n//                 guest: {\n//                     username, \n//                     password\n//                 },\n//             },\n//         });\n\n//         if (success) {\n//             return {\n//                 error: null, \n//                 token: data.token,\n//                 message: data.message\n//             };\n//         } else {\n//             return {\n//                 error: error.message,\n//                 token: null,\n//                 message: null\n//             };\n//         }\n//     } catch(error) {\n//         console.error(\"Error in registerUser!!!\", error);\n\n//         return {\n//             error: \"Registration Failed.\",\n//             token: null,\n//             message: null\n//         };\n//     }\n// };\n\n\nexport const fetchUser = async(token) => {\n    const {success, error, data} = await fetch('users/me', {\n        token: token,\n        defaultError: 'Failed to load User information'\n    });\n    return {\n        error: error,\n        user: success ? data.user : null\n    };\n};\n\n// export const fetchUser = async(token) => {\n//     try {\n//         const {success, error, data} = await callAPI(\"users/me\", {\n//             token: token\n//         });\n//         if (success) {\n//             return {\n//                 error: null,\n//                 user: data.user\n//             };\n//         }\n//     } catch(error) {\n//         console.error(\"Error in fetchUser!!!\", error);\n\n//         return {\n//             error: \"Failed to load User information\",\n//             user: null\n//         };\n//     }\n// };\n\nexport const createPost = async (\n    token, \n    title, \n    description, \n    price, \n    location \n    ) => {\n    const post = {\n        title: title,\n        description: description,\n        price: price\n    };\n    if (location) {\n        post.location = location;\n    }\n\n    const {success, error, data} = await callAPI('posts', {\n        token: token,\n        method: 'POST',\n        body: {\n            post: post\n        },\n        defaultError: \"Failed to create Post\"\n    });\n    return {\n        error: error,\n        post: success ? data.post: null\n    };\n}\n\n// export const createPost = async(token, title,  description)"],"mappings":"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"},"metadata":{},"sourceType":"module"}